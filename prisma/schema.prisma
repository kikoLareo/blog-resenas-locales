// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  passwordHash  String?   @db.Text
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  role          UserRole  @default(GUEST)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  paywallSubscriptions PaywallSubscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Passkeys support
model Authenticator {
  id                    String   @id @default(cuid())
  credentialID         String   @unique
  userId               String
  credentialPublicKey  String
  counter              Int
  transports           String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Paywall and subscription management
model PaywallSubscription {
  id        String   @id @default(cuid())
  userId    String
  plan      String   // BASIC, PRO, ENTERPRISE
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime @default(now())
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  GUEST
  MEMBER
  EDITOR
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

// Site Settings - Configuración del sitio
model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String?  @db.Text
  category  String   // 'site', 'seo', 'ads', 'sanity', 'general'
  label     String
  type      String   // 'string', 'boolean', 'number', 'url', 'json'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
}

// Homepage Sections - Gestión de secciones de la página principal
model HomepageSection {
  id          String   @id @default(cuid())
  title       String   // Título interno para dashboard
  sectionType String   // 'hero', 'poster', 'poster-v2', 'banner', 'card-square'
  enabled     Boolean  @default(true)
  order       Int      // Orden de aparición en la página
  config      Json     // Configuración completa (SectionConfig type)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([enabled, order])
}

